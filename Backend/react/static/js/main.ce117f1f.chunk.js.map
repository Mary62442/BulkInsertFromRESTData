{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["FormComponent","inputs","onFormSubmit","formType","useForm","register","handleSubmit","errors","inputsToList","map","e","i","key","label","name","type","ref","required","className","onSubmit","formData","value","App","useState","submitted","info","infoSubmitted","setInfoSubmitted","score","setScoreSubmitted","handleFormSubmit","dataToSend","scoredata","console","log","fetch","method","headers","credentials","body","JSON","stringify","then","res","json","data","catch","err","error","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qMA+BeA,MA3Bf,YAA0D,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,SAAW,EAEVC,cAAnCC,EAF6C,EAE7CA,SAAUC,EAFmC,EAEnCA,aAAcC,EAFqB,EAErBA,OAE5BC,EAAeP,EAAOQ,KAAI,SAACC,EAAEC,GAC7B,OACI,yBAAKC,IAAKD,GACN,+BAAQD,EAAEG,OACV,2BAAQC,KAAQJ,EAAEI,KAAMC,KAAQL,EAAEK,KAAMC,IAAKX,EAAS,CAAEY,UAAU,MACjEV,EAAOG,EAAEI,OAAS,uBAAGI,UAAY,cAAf,KAA+BR,EAAEG,MAAjC,oBAUjC,OACE,0BAAMK,UAAY,iBAAiBC,SAAUb,GAL1B,SAACc,GAChBlB,EAAa,CAACC,WAAUiB,iBAKvBZ,EACD,2BAAOO,KAAK,SAASM,MAAM,eCqCpBC,MA3Df,WAAgB,IAAD,EAE6BC,mBAAS,CAACC,WAAU,EAAOC,KAAK,KAF7D,mBAENC,EAFM,KAESC,EAFT,OAG+BJ,mBAAS,CAACC,WAAU,EAAOI,MAAM,KAHhE,mBAGUC,GAHV,WAKPC,EAAmB,SAAC,GAA0B,IAAzB3B,EAAwB,EAAxBA,SAAUiB,EAAc,EAAdA,SACnC,GAAiB,SAAbjB,EAAqBwB,EAAiB,CAACH,WAAU,EAAMC,KAAKL,QAC1D,CACJS,EAAkB,CAACL,WAAU,EAAMI,MAAMR,IACzC,IAAIW,EAAa,CAACC,UAAU,eAAIN,EAAcD,KAAnB,GAA4BL,IACvDa,QAAQC,IAAIH,GAGZI,MAAM,uCAAwC,CAC5CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,YAAY,UACZC,KAAMC,KAAKC,UAAUV,KAEtBW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIZ,QAAQC,IAAI,WAAYW,MACrCC,OAAM,SAAAC,GAAG,OAAId,QAAQe,MAAM,SAAUD,QAqB1C,OACE,yBAAK7B,UAAU,kBACb,wBAAIA,UAAY,SAAhB,aACA,uBAAGA,UAAY,gBAAf,iCAECQ,EAAcF,UACb,kBAACyB,EAAD,CAAM9C,SAAW,QAAQF,OAZb,CAChB,CAACY,MAAM,MAAOC,KAAK,MAAOC,KAAK,UAC/B,CAACF,MAAM,YAAaC,KAAK,YAAaC,KAAK,WAUSb,aAAgB4B,IAEhE,kBAACmB,EAAD,CAAM9C,SAAW,OAAOF,OApBb,CACf,CAACY,MAAM,OAAQC,KAAK,OAAQC,KAAK,QACjC,CAACF,MAAO,OAAQC,KAAK,OAAQC,KAAK,QAClC,CAACF,MAAM,eAAgBC,KAAK,cAAeC,KAAK,SAiBEb,aAAgB4B,MC5ClDoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.ce117f1f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport { useForm } from 'react-hook-form';\n\nfunction FormComponent({inputs, onFormSubmit, formType}) {\n\n    const { register, handleSubmit, errors } = useForm();\n\n    let inputsToList = inputs.map((e,i) => {\n        return (\n            <div key={i}>\n                <label>{e.label}</label>\n                <input  name = {e.name} type = {e.type} ref={register({ required: true })}/>\n                {errors[e.name] && <p className = \"form-error\">* {e.label} is required</p>}\n            </div>            \n        )\n    });\n   \n\n    const formSubmit = (formData) => {        \n        onFormSubmit({formType, formData})\n    }\n\n  return (\n    <form className = \"form-component\" onSubmit={handleSubmit(formSubmit)}>\n        {inputsToList}\n        <input type=\"submit\" value=\"Continue\"/>\n    </form>\n  );\n}\n\nexport default FormComponent;\n","import React, {useState} from 'react';\nimport './App.scss';\nimport Form from \"./Form.js\";\n\nfunction App() {\n\n  const [infoSubmitted, setInfoSubmitted] = useState({submitted:false, info:{}});\n  const [scoreSubmitted, setScoreSubmitted] = useState({submitted:false, score:{}});\n\n  const handleFormSubmit = ({formType, formData}) => {    \n    if (formType === \"info\") setInfoSubmitted({submitted:true, info:formData});\n    else  {\n      setScoreSubmitted({submitted:true, score:formData});\n      let dataToSend = {scoredata:{...infoSubmitted.info, ...formData}};\n      console.log(dataToSend);\n\n\n      fetch('http://35.222.121.136/setscoreinlist', {\n        method: 'POST', \n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials:\"include\",\n        body: JSON.stringify(dataToSend),\n      })\n      .then(res => res.json())\n      .then(data => console.log('Success:', data))\n      .catch(err => console.error('Error:', err));\n\n    }\n  };\n\n\n\n  \n\n  let infoInputs = [\n    {label:\"Name\", name:\"name\", type:\"text\"},\n    {label: \"City\", name:\"city\", type:\"text\"},\n    {label:\"Phone number\", name:\"phoneNumber\", type:\"text\"}\n  ];\n\n  let scoreInputs = [\n    {label:\"Age\", name:\"age\", type:\"number\"},\n    {label:\"Certainty\", name:\"certainty\", type:\"number\"}\n  ];\n\n\n  return (\n    <div className=\"main-container\">\n      <h1 className = \"title\">Guess it!</h1>\n      <p className = \"presentation\">Welcome to the Guess it! app.</p>\n\n      {infoSubmitted.submitted ? (\n        <Form formType = \"score\" inputs = {scoreInputs} onFormSubmit = {handleFormSubmit}></Form>\n      ):(\n        <Form formType = \"info\" inputs = {infoInputs} onFormSubmit = {handleFormSubmit}></Form>\n      )} \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}